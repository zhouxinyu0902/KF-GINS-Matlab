% 纯惯导解算
clear;
% clc;
%% 定义参数/加载配置
param = Param();
% cfg = ProcessConfig1();
% cfg = ProcessConfig2();
% cfg = ProcessConfig3();
cfg = ProcessConfigsimu();
% cfg = ProcessConfig4_zxy();
%% 导入数据
% imudata
imudata = importdata(cfg.imufilepath);
imustarttime = imudata(1, 1);
imuendtime = imudata(end, 1);

if isfield(cfg,'depthfilepath')
    depthdata = importdata(cfg.depthfilepath);
    depthstarttime = depthdata(1, 1);
    depthendtime = depthdata(end, 1);
end
if isfield(cfg,'gnssfilepath')
    gnssdata = importdata(cfg.gnssfilepath);
    gnssdata(:, 2:3) = gnssdata(:, 2:3) * param.D2R;
    gnssstarttime = gnssdata(1, 1);
    gnssendtime = gnssdata(end, 1);
end
%% 保存结果
pvapath=[cfg.outputfolder,'/pure_ins.txt'];
pvafp=fopen(pvapath,"wt");
% if isfield(cfg,'gnssfilepath')
%     navpath=[cfg.outputfolder,'/ins','_gnss.txt'];
%     navfp=fopen(navpath,"wt");
% end
%% 统一处理时间
if cfg.starttime < imustarttime
    cfg.starttime = imustarttime;
    disp('处理开始时间小于IMU的开始时间')
end
if cfg.endtime > imuendtime
    cfg.endtime = imuendtime;
    disp('处理结束时间大于IMU的结束时间')
end
imudata = imudata(imudata(:,1) >= cfg.starttime, :);
imudata = imudata(imudata(:,1) <= cfg.endtime, :);
if isfield(cfg,'depthfilepath')
    depthdata = depthdata(depthdata(:,1) >= cfg.starttime, :);
    depthdata = depthdata(depthdata(:,1) <= cfg.endtime, :);
end
if isfield(cfg,'gnssfilepath')
    gnssdata = gnssdata(gnssdata(:,1) >= cfg.starttime, :);
    gnssdata = gnssdata(gnssdata(:,1) <= cfg.endtime, :);
end
%% for debug
disp("Start GNSS/INS Processing!");
lastprecent = 0;
% initialization
tic;
% navstate = InitializeCfg(cfg);
[kf, navstate] = myInitialize(cfg);
laststate = navstate;
ll=length(imudata);

thisimu = imudata(1,:)';
starttime = thisimu(1);
% 取gnss开始的索引
gnssindex=1;
while gnssdata(gnssindex, 1) < thisimu(1, 1)
    gnssindex = gnssindex + 1;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% MAIN PROCEDD PROCEDURE!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for imuindex = 2:ll
    % set value of last state

    lastimu = thisimu;

    laststate = navstate;
    thisimu = imudata(imuindex, :)';

    imudt = thisimu(1, 1) - lastimu(1, 1);

    % compensate IMU error
    % thisimu(2:4, 1) = (thisimu(2:4, 1) - imudt * navstate.gyrbias)./(ones(3, 1) + navstate.gyrscale);
    % thisimu(5:7, 1) = (thisimu(5:7, 1) - imudt * navstate.accbias)./(ones(3, 1) + navstate.accscale);

    % % 当gnss的时间小于lastimu的时间时，索引+1，确保gnss的时间是在lastimu后面的
    % % while (gnssindex <= size(gnssdata, 1) && gnssdata(gnssindex, 1) < lastimu(1, 1))
    % %     gnssindex = gnssindex + 1;
    % % end
    % % 检查索引
    % % if (gnssindex > size(gnssdata, 1))
    % %     disp('GNSS file END!');
    % %     break;
    % % end
    % % 
    % % determine whether gnss update is required
    % % 如果lastimu的时间等于gnss的时间
    % % if lastimu(1, 1) == gnssdata(gnssindex, 1) 
    % %     do gnss update for the current state
    % %     thisgnss = gnssdata(gnssindex, :)';
    % %     kf = GNSSUpdate(navstate, thisgnss, kf, cfg.antlever, cfg.usegnssvel, lastimu, imudt);
    % %     [kf, navstate] = ErrorFeedback(kf, navstate);
    % %     gnssindex = gnssindex + 1;
    % %     laststate = navstate;
    % % 
    % %     do propagation for current imu data
    % %     imudt = thisimu(1, 1) - lastimu(1, 1);
    % %     navstate = InsMech(laststate, lastimu, thisimu);
    % %     kf = InsPropagate(navstate, thisimu, imudt, kf, cfg.corrtime);
    % % elseif (lastimu(1, 1) < gnssdata(gnssindex, 1) && thisimu(1, 1) > gnssdata(gnssindex, 1))
    % %     如果lastimu的时间小于gnss，同时thisimu的时间大于gnss
    % %     ineterpolate imu to gnss time
    % %     [firstimu, secondimu] = interpolate(lastimu, thisimu, gnssdata(gnssindex, 1));
    % % 
    % %     do propagation for first imu
    % %     imudt = firstimu(1, 1) - lastimu(1, 1);
    % %     navstate = InsMech(laststate, lastimu, firstimu);
    % %     kf = InsPropagate(navstate, firstimu, imudt, kf, cfg.corrtime);
    % % 
    % %     do gnss update
    % %     thisgnss = gnssdata(gnssindex, :)';
    % %     kf = GNSSUpdate(navstate, thisgnss, kf, cfg.antlever, cfg.usegnssvel, firstimu, imudt);
    % %     [kf, navstate] = ErrorFeedback(kf, navstate);
    % %     gnssindex = gnssindex + 1;
    % %     laststate = navstate;
    % %     lastimu = firstimu;
    % % 
    % %     do propagation for second imu
    % %     imudt = secondimu(1, 1) - lastimu(1, 1);
    % %     navstate = InsMech(laststate, lastimu, secondimu);
    % %     kf = InsPropagate(navstate, secondimu, imudt, kf, cfg.corrtime);
    % % else 
    % %     如果gnss的数据时间大于thisimu的数据时间
    % %     only do propagation
    % %     INS mechanization
    % %     navstate = InsMech(laststate, lastimu, thisimu);
    % %     error propagation
    % %     kf = InsPropagate(navstate, thisimu, imudt, kf, cfg.corrtime);
    % % end

    % % INS mechanization
    navstate = InsMech(laststate, lastimu, thisimu);
    navstate.pos(3)=depthdata(imuindex,2);

    % write navresult to file
    nav = zeros(11, 1);
    nav(2, 1) = navstate.time;
    nav(3:5, 1) = [navstate.pos(1) * param.R2D; navstate.pos(2) * param.R2D; navstate.pos(3)];
    nav(6:8, 1) = navstate.vel;
    nav(9:11, 1) = navstate.att * param.R2D;
    fprintf(pvafp, '%2d %12.6f %12.8f %12.8f %8.4f %8.4f %8.4f %8.4f %8.4f %8.4f %8.4f \n', nav);
    % print processing information
    if (imuindex / (ll - 1) - lastprecent> 0.01)
        disp("processing " + num2str(floor(imuindex * 100 / (ll-1))) + " %!");
        lastprecent = imuindex / (ll - 1);
    end
end
tt=toc;
disp(['处理完毕，数据从',num2str(starttime),' s，到',num2str(thisimu(1)),' s，总共',...
    num2str(navstate.time-starttime),' s'])
disp(['代码运行时间为: ', num2str(tt), ' 秒']);

% close file
fclose(pvafp);
disp("GNSS/INS Integration Processing Finished!");
%%
truthpath = [cfg.outputfolder,'/truth.nav'];
calc_error(pvapath,truthpath)

%%
% plot_result(pvapath,'single')
% plot_result(truthpath,'single')
plot_cmp(pvapath,truthpath)
legend('start','ref','start','ins')
